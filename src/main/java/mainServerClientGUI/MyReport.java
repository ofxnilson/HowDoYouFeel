package mainServerClientGUI;
import javax.swing.table.DefaultTableModel;
import java.io.*;
/*
 * @author Nilson Francisco
 */
// Popup to be shown when the user clicks to generate the report
public class MyReport extends javax.swing.JPanel {
    private final int userId;
    
    /**
     * Creates new form MyReport
     * @param userId
     */
    public MyReport(int userId){
        this.userId = userId;
        initComponents();
        loadUsersMoods();
    }
    
    // Method to catch the user moods inputed previously from the .csv file and generate the report
    private void loadUsersMoods(){
        String[] columns = {"Date", "UserId", "Text", "Sentiment", "Confidence", "TimeOfDay", "Activity"};
        
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        int totalEntries = 0;
        int positiveCount = 0, negativeCount = 0, neutralCount = 0;
        float totalConfidence = 0;
        String happiestEntry = "";
        float happiestConfidence = -1;
        String saddestEntry = "";
        float saddestConfidence = -1;

        File file = new File("data/tracker/usersMoods.csv");

        if (!file.exists()){
            EntriesNum.setText("No mood data found.");
            return;
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(file))){
            String header = reader.readLine(); // Skip the header line
            System.out.println("Sipped header: " + header);
            String line;
            while ((line = reader.readLine()) != null) {
                String[] values = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                if (values.length < 7) continue;

                String userField = values[1].replace("\"", "").trim();
                if(userField.equalsIgnoreCase("UserID")) continue;
                
                int lineUserId = Integer.parseInt(values[1].replace("\"", ""));
                if (lineUserId != userId) continue;

                String date = values[0].replace("\"", "");
                String text = values[2].replace("\"", "");
                String sentiment = values[3].replace("\"", "");
                float confidence = Float.parseFloat(values[4].replace("\"", ""));
                String timeOfDay = values[5].replace("\"", "");
                String activity = values[6].replace("\"", "");

                model.addRow(new Object[]{date, userId, text, sentiment, confidence, timeOfDay, activity});

                totalEntries++;
                totalConfidence += confidence;

                switch (sentiment.toLowerCase()){
                    case "positive":
                        positiveCount++;
                        if (confidence > happiestConfidence){
                            happiestConfidence = confidence;
                            happiestEntry = text;
                        }
                        break;
                    case "negative":
                        negativeCount++;
                        if (confidence > saddestConfidence){
                            saddestConfidence = confidence;
                            saddestEntry = text;
                        }
                        break;
                    default:
                        neutralCount++;
                }
            }

            JpaneTable.setModel(model);

            if (totalEntries > 0){
                float avg = totalConfidence / totalEntries;
                EntriesNum.setText("<html><b>Entries:</b> " + totalEntries
                        + " | Positive: " + positiveCount
                        + " | Negative: " + negativeCount
                        + " | Neutral: " + neutralCount
                        + "<br><b>Avg. Confidence:</b> " + String.format("%.2f", avg)
                        + "<br><b>Happiest:</b> \"" + happiestEntry + "\""
                        + "<br><b>Saddest:</b> \"" + saddestEntry + "\"</html>");
            } 
            else{
                EntriesNum.setText("This user has no sentiments inputed!");
            }

        } 
        catch (IOException | NumberFormatException e){
            EntriesNum.setText("Error loading report: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        reportTable = new javax.swing.JScrollPane();
        JpaneTable = new javax.swing.JTable();
        EntriesNum = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("How do you feel");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("My Report");

        JpaneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        reportTable.setViewportView(JpaneTable);

        EntriesNum.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        EntriesNum.setText("Entries:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(EntriesNum)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportTable, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EntriesNum)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EntriesNum;
    private javax.swing.JTable JpaneTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane reportTable;
    // End of variables declaration//GEN-END:variables
}
